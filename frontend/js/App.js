import config from './config.js?v=2.1.1';
import WindUtils from './utils/WindUtils.js?v=2.1.1';
import WindDataManager from './WindDataManager.js?v=2.1.1';
import WindStreamManager from './WindStreamManager.js?v=2.1.1';
import MapController from './MapController.js?v=2.1.1';
import ForecastManager from './ForecastManager.js?v=2.1.1';
import WindArrowController from './WindArrowController.js?v=2.1.1';
import HistoryManager from './HistoryManager.js?v=2.1.1';
import WindStatistics from './WindStatistics.js?v=2.1.1';
import NotificationManager from './NotificationManager.js?v=2.1.1';
import KiteSizeRecommendation from './KiteSizeRecommendation.js?v=2.1.1';
import TodayWindTimeline from './TodayWindTimeline.js?v=2.1.1';
import WeekWindHistory from './WeekWindHistory.js?v=2.1.1';
import { rippleManager } from './MaterialRipple.js?v=2.1.1';

class App {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        this.windDataManager = new WindDataManager();
        this.windStreamManager = new WindStreamManager('/api');
        this.mapController = new MapController();
        this.forecastManager = new ForecastManager();
        this.historyManager = new HistoryManager();
        this.windStatistics = new WindStatistics();
        this.notificationManager = new NotificationManager();
        this.kiteSizeRecommendation = new KiteSizeRecommendation();
        this.todayWindTimeline = new TodayWindTimeline();
        this.weekWindHistory = new WeekWindHistory();

        this.windArrowController = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã
        this.updateInterval = null;
        this.historyUpdateInterval = null;
        this.liveCounterInterval = null;
        this.workingHoursCheckInterval = null;
        this.lastUpdateTime = null;
        this.isInitialized = false;

        // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å—Ç–∞–Ω—Ü–∏–∏ (Bangkok time)
        this.workingHours = {
            start: 6,
            end: 19
        };
    }

    async init() {
        try {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JollyKite App...');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏
            this.updateWorkingHoursVisibility();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
            this.mapController.initMap();
            console.log('‚úì –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞
            this.windArrowController = new WindArrowController(
                this.mapController,
                this.windDataManager
            );
            console.log('‚úì –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            if (!this.forecastManager.init()) {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
            } else {
                console.log('‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–π—Ç–∞
            if (!this.kiteSizeRecommendation.init()) {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–π—Ç–∞');
            } else {
                console.log('‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–π—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if (!this.todayWindTimeline.init()) {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
            } else {
                console.log('‚úì –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ç—Ä–∞ –∑–∞ 7 –¥–Ω–µ–π
            if (!this.weekWindHistory.init()) {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ç—Ä–∞ –∑–∞ 7 –¥–Ω–µ–π');
            } else {
                console.log('‚úì –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ç—Ä–∞ –∑–∞ 7 –¥–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            this.forecastManager.setupSimulation((direction, speed) => {
                this.simulateWind(direction, speed);
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏
            if (!this.historyManager.isStorageAvailable()) {
                console.warn('‚ö† –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)');
            } else {
                console.log('‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤');
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã)
            if (this.isWithinWorkingHours()) {
                this.connectToWindStream();
            }

            // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (forecast –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ —Ç–∞–π–º–µ—Ä—É)
            this.startHistoryUpdate();

            // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
            this.startWorkingHoursCheck();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Material Design 3 Ripple —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            rippleManager.init();
            console.log('‚úì Material Design 3 Ripple —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

            this.isInitialized = true;
            console.log('‚úÖ JollyKite App —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            return false;
        }
    }

    async loadInitialData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ
        try {
            await this.updateWindData();
            console.log('‚úì –î–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ:', error);
            this.showWindError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–∏—Å—Ç–æ—Ä–∏—è + –ø—Ä–æ–≥–Ω–æ–∑)
        try {
            await this.updateTodayTimeline();
            console.log('‚úì –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ 7 –¥–Ω–µ–π
        try {
            await this.updateWeekHistory();
            console.log('‚úì –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 7 –¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ 7 –¥–Ω–µ–π:', error);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        try {
            await this.updateForecast();
            console.log('‚úì –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
            this.forecastManager.showError(error);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.setupNotificationButton();
    }

    setupNotificationButton() {
        const button = document.getElementById('notificationButton');
        if (!button) return;

        // Update button state
        this.notificationManager.updateUI(button);

        // Handle button click
        button.addEventListener('click', async () => {
            try {
                button.disabled = true;
                const isSubscribed = await this.notificationManager.isSubscribed();

                if (isSubscribed) {
                    await this.notificationManager.unsubscribe();
                    alert('‚úì –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
                } else {
                    await this.notificationManager.subscribe();
                    alert('‚úì –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ç—Ä–µ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–µ—Ç–µ—Ä —É—Å–∏–ª–∏—Ç—Å—è –≤—ã—à–µ 10 —É–∑–ª–æ–≤ (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)');
                }

                // Update button state
                await this.notificationManager.updateUI(button);
            } catch (error) {
                console.error('Error toggling notifications:', error);
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                button.disabled = false;
            }
        });
    }

    /**
     * Connect to SSE stream for real-time wind updates
     */
    connectToWindStream() {
        console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

        this.windStreamManager.connect((windData, trend) => {
            try {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ timestamp –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
                if (windData.timestamp) {
                    this.lastUpdateTime = new Date(windData.timestamp);
                    console.log('üìÖ –í—Ä–µ–º—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ç—Ä–æ–º–µ—Ç—Ä–∞:', this.lastUpdateTime.toISOString());
                }

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                const safety = this.windDataManager.getWindSafety(
                    windData.windDir,
                    windData.windSpeedKnots
                );

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                windData.safety = safety;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                this.updateWindDisplay(windData);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞
                if (this.windArrowController) {
                    this.windArrowController.updateWind(windData.windDir, windData.windSpeedKnots);
                }

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.windStatistics.addMeasurement(windData);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ backend
                this.updateWindTrendFromBackend(trend);

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if (this.historyManager.isStorageAvailable()) {
                    this.historyManager.saveWindData(windData);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SSE –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        });

        // –ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.startLiveCounter();
    }

    async updateWindData() {
        try {
            const windData = await this.windDataManager.fetchCurrentWindData();

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ timestamp –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (windData.timestamp) {
                this.lastUpdateTime = new Date(windData.timestamp);
                console.log('üìÖ –í—Ä–µ–º—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ç—Ä–æ–º–µ—Ç—Ä–∞:', this.lastUpdateTime.toISOString());
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const safety = this.windDataManager.getWindSafety(
                windData.windDir,
                windData.windSpeedKnots
            );

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            windData.safety = safety;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            this.updateWindDisplay(windData);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞
            if (this.windArrowController) {
                this.windArrowController.updateWind(windData.windDir, windData.windSpeedKnots);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.windStatistics.addMeasurement(windData);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            this.updateWindTrend();

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if (this.historyManager.isStorageAvailable()) {
                this.historyManager.saveWindData(windData);
            }

            return windData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ:', error);
            throw error;
        }
    }

    /**
     * Update wind trend with data from SSE (faster than API call)
     */
    updateWindTrendFromBackend(trend) {
        const trendIconElement = document.getElementById('trendIcon');
        const trendTextElement = document.getElementById('trendText');
        const trendElement = document.getElementById('windTrend');

        if (trendIconElement && trendTextElement && trend) {
            // –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            trendIconElement.textContent = trend.icon;
            trendIconElement.style.color = trend.color;

            // –¢–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–æ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            if (trend.percentChange !== undefined && trend.percentChange !== 0) {
                const percentText = trend.percentChange > 0 ?
                    `+${Math.abs(trend.percentChange).toFixed(1)}%` :
                    `-${Math.abs(trend.percentChange).toFixed(1)}%`;
                trendTextElement.innerHTML = `<span style="font-weight: 600;">${trend.text}</span> ${percentText} <span style="opacity: 0.7;">(–∑–∞ 30 –º–∏–Ω)</span>`;
                trendTextElement.style.color = trend.color;
            } else {
                trendTextElement.innerHTML = '<span style="opacity: 0.7;">–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</span>';
                trendTextElement.style.color = '#808080';
            }

            // Tooltip —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç–æ–¥–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
            if (trendElement) {
                if (trend.currentSpeed && trend.previousSpeed) {
                    const changeText = trend.change > 0 ? `+${trend.change.toFixed(1)}` : trend.change.toFixed(1);
                    trendElement.title = `${trend.text}\n\n–ú–µ—Ç–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞:\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω: ${trend.currentSpeed.toFixed(1)} —É–∑–ª–æ–≤\n‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –º–∏–Ω: ${trend.previousSpeed.toFixed(1)} —É–∑–ª–æ–≤\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeText} —É–∑–ª–æ–≤ (${trend.percentChange.toFixed(1)}%)\n\n–ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`;
                } else {
                    trendElement.title = '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞\n(—Ç—Ä–µ–±—É–µ—Ç—Å—è 60 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 –º–∏–Ω)';
                }
            }
        }
    }

    async updateWindTrend() {
        // Fetch trend from backend instead of calculating on frontend
        const trend = await this.windDataManager.fetchWindTrend();
        this.updateWindTrendFromBackend(trend);
    }

    updateWindDisplay(windData) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
        const windSpeedElement = document.getElementById('windSpeed');
        if (windSpeedElement) {
            windSpeedElement.textContent = windData.windSpeedKnots.toFixed(1);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–π—Ç–∞
        if (this.kiteSizeRecommendation) {
            this.kiteSizeRecommendation.updateRecommendations(windData.windSpeedKnots);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–º –±–∞—Ä–µ
        const windSpeedIndicator = document.getElementById('windSpeedIndicator');
        if (windSpeedIndicator) {
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –Ω–∞ —à–∫–∞–ª—É –æ—Ç 0 –¥–æ 30+ —É–∑–ª–æ–≤
            const maxSpeed = 30;
            const speed = Math.min(windData.windSpeedKnots, maxSpeed);
            const percentage = (speed / maxSpeed) * 100;
            windSpeedIndicator.style.left = `${percentage}%`;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞
        const windGustElement = document.getElementById('windGust');
        if (windGustElement) {
            windGustElement.textContent = (windData.windGustKnots !== null && windData.windGustKnots !== undefined)
                ? windData.windGustKnots.toFixed(1)
                : '--';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ã–≤–∞ —Å–µ–≥–æ–¥–Ω—è
        const maxGustElement = document.getElementById('maxGust');
        if (maxGustElement) {
            maxGustElement.textContent = (windData.maxGustKnots !== null && windData.maxGustKnots !== undefined)
                ? windData.maxGustKnots.toFixed(1)
                : '--';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞
        this.updateWindDescription(windData);
    }

    updateWindDescription(windData) {
        const windDesc = this.getWindDescription(windData.windSpeedKnots, windData.windDir);

        const windIcon = document.getElementById('windIcon');
        const windTitle = document.getElementById('windTitle');
        const windSubtitle = document.getElementById('windSubtitle');
        const windCardinal = document.getElementById('windCardinal');

        if (windIcon) windIcon.textContent = windDesc.icon;
        if (windTitle) windTitle.textContent = windDesc.title;

        // windSubtitle –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø –≤–µ—Ç—Ä–∞ (–±–µ–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏)
        if (windSubtitle && windData.safety) {
            let safetyText = windData.safety.text + ' ‚Ä¢ ';
            let textColor = windData.safety.color;

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–µ—Ç—Ä–∞ (offshore/onshore)
            if (windData.safety.isOffshore) {
                safetyText = '‚ö†Ô∏è –û–ü–ê–°–ù–û ‚Ä¢ –û—Ç–∂–∏–º (offshore)';
                textColor = '#FF4500'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è offshore - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –æ–ø–∞—Å–Ω–æ!
            } else if (windData.safety.isOnshore) {
                safetyText += '–ü—Ä–∏–∂–∏–º (onshore)';
            } else {
                safetyText += '–ë–æ–∫–æ–≤–æ–π (sideshore)';
            }

            windSubtitle.textContent = safetyText;
            windSubtitle.style.color = textColor;
            windSubtitle.style.fontWeight = '600';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ (—Ä—É–º–±)
        if (windCardinal) {
            windCardinal.textContent = this.degreesToCardinal(windData.windDir);
        }

    }

    degreesToCardinal(degrees) {
        return WindUtils.degreesToCardinal(degrees);
    }

    getWindDescription(speedKnots, degrees) {
        return WindUtils.getWindDescription(speedKnots, degrees);
    }

    async updateForecast() {
        try {
            this.forecastManager.showLoading();
            const forecastData = await this.windDataManager.fetchWindForecast();
            this.forecastManager.displayForecast(forecastData);
        } catch (error) {
            this.forecastManager.showError(error);
            throw error;
        }
    }

    async updateTodayTimeline() {
        try {
            await this.todayWindTimeline.displayTimeline();
        } catch (error) {
            console.error('Error updating today timeline:', error);
            this.todayWindTimeline.showError(error);
        }
    }

    async updateWeekHistory() {
        try {
            await this.weekWindHistory.displayHistory();
        } catch (error) {
            console.error('Error updating week history:', error);
            this.weekWindHistory.showError(error);
        }
    }

    simulateWind(direction, speed) {
        console.log(`–°–∏–º—É–ª—è—Ü–∏—è –≤–µ—Ç—Ä–∞: ${speed} —É–∑–ª–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${direction}¬∞`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const simulatedData = {
            windSpeedKnots: speed,
            windDir: direction,
            windGustKnots: speed * 1.2,
            windDirAvg: direction,
            temperature: 85, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            humidity: 65,
            pressure: 30.1,
            timestamp: new Date()
        };
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const safety = this.windDataManager.getWindSafety(direction, speed);
        simulatedData.safety = safety;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.updateWindDisplay(simulatedData);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
        if (this.windArrowController) {
            this.windArrowController.updateWind(direction, speed);
        }
    }

    showWindError(message) {
        const windTitle = document.getElementById('windTitle');
        const windSubtitle = document.getElementById('windSubtitle');
        const windIcon = document.getElementById('windIcon');
        
        if (windTitle) windTitle.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        if (windSubtitle) windSubtitle.textContent = message;
        if (windIcon) windIcon.textContent = '‚ö†Ô∏è';
    }

    /**
     * Start periodic history update (wind updates come via SSE)
     */
    startHistoryUpdate() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.historyUpdateInterval = setInterval(async () => {
            try {
                await this.updateTodayTimeline();
                console.log('‚úì –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
            }
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

        console.log('‚úì –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    }

    /**
     * Start LIVE counter showing data timestamp
     */
    startLiveCounter() {
        const counterElement = document.getElementById('updateCountdown');
        if (!counterElement) return;

        // Don't initialize lastUpdateTime here - it will be set from server data

        // Update counter every second
        this.liveCounterInterval = setInterval(() => {
            if (!this.lastUpdateTime) {
                counterElement.textContent = '–∑–∞–≥—Ä—É–∑–∫–∞...';
                return;
            }

            // Calculate seconds ago
            const now = new Date();
            const secondsAgo = Math.floor((now - this.lastUpdateTime) / 1000);

            // Format time as HH:MM
            const hours = this.lastUpdateTime.getHours().toString().padStart(2, '0');
            const minutes = this.lastUpdateTime.getMinutes().toString().padStart(2, '0');

            // Show different messages based on how long ago
            let displayText;
            if (secondsAgo < 60) {
                displayText = `${secondsAgo}—Å –Ω–∞–∑–∞–¥`;
            } else if (secondsAgo < 3600) {
                const minutesAgo = Math.floor(secondsAgo / 60);
                displayText = `${minutesAgo}–º –Ω–∞–∑–∞–¥`;
            } else {
                displayText = `–≤ ${hours}:${minutes}`;
            }

            counterElement.textContent = displayText;
        }, 1000);

        console.log('‚úì LIVE —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω');
    }

    /**
     * Check if current time is within working hours (6:00-19:00 Bangkok time)
     */
    isWithinWorkingHours() {
        const bangkokTime = new Date().toLocaleString('en-US', {
            timeZone: 'Asia/Bangkok',
            hour12: false
        });
        const hour = parseInt(new Date(bangkokTime).getHours());
        return hour >= this.workingHours.start && hour < this.workingHours.end;
    }

    /**
     * Update visibility of sections based on working hours
     */
    updateWorkingHoursVisibility() {
        const isWorking = this.isWithinWorkingHours();

        const offlineNotice = document.getElementById('offlineNotice');
        const currentWindSection = document.getElementById('currentWindSection');
        const mapSection = document.getElementById('mapSection');

        if (isWorking) {
            // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –∏ –∫–∞—Ä—Ç—É, —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (offlineNotice) offlineNotice.style.display = 'none';
            if (currentWindSection) currentWindSection.style.display = 'block';
            if (mapSection) mapSection.style.display = 'block';
        } else {
            // –ù–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å–∫—Ä—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –∏ –∫–∞—Ä—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (offlineNotice) offlineNotice.style.display = 'block';
            if (currentWindSection) currentWindSection.style.display = 'none';
            if (mapSection) mapSection.style.display = 'none';
        }

        console.log(`üìÖ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏: ${isWorking ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'} (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ 6:00-19:00)`);
    }

    /**
     * Start periodic check of working hours
     */
    startWorkingHoursCheck() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.workingHoursCheckInterval = setInterval(() => {
            const wasWorking = this.isWithinWorkingHours();
            this.updateWorkingHoursVisibility();
            const isWorking = this.isWithinWorkingHours();

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (wasWorking !== isWorking) {
                if (isWorking) {
                    // –ù–∞—á–∞–ª–∏—Å—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE
                    console.log('üåÖ –ù–∞—á–∞–ª–∏—Å—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE...');
                    this.connectToWindStream();
                } else {
                    // –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã - –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç SSE
                    console.log('üåô –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç SSE...');
                    if (this.windStreamManager) {
                        this.windStreamManager.disconnect();
                    }
                }
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        console.log('‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
    }

    stopAutoUpdate() {
        // Disconnect from SSE stream
        if (this.windStreamManager) {
            this.windStreamManager.disconnect();
            console.log('SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }

        // Stop history updates
        if (this.historyUpdateInterval) {
            clearInterval(this.historyUpdateInterval);
            this.historyUpdateInterval = null;
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }

        // Stop LIVE counter
        if (this.liveCounterInterval) {
            clearInterval(this.liveCounterInterval);
            this.liveCounterInterval = null;
            console.log('LIVE —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // Stop working hours check
        if (this.workingHoursCheckInterval) {
            clearInterval(this.workingHoursCheckInterval);
            this.workingHoursCheckInterval = null;
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    getWindHistory(hours = 24) {
        return this.historyManager.getHistoryByPeriod(hours);
    }

    getWindStatistics(hours = 24) {
        return this.historyManager.getWindStatistics(hours);
    }

    exportHistoryJSON(hours = null) {
        return this.historyManager.exportHistoryJSON(hours);
    }

    exportHistoryCSV(hours = null) {
        return this.historyManager.exportHistoryCSV(hours);
    }

    clearHistory() {
        return this.historyManager.clearHistory();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    getStatisticsCacheInfo() {
        return this.windStatistics.getCacheInfo();
    }

    clearStatisticsCache() {
        this.windStatistics.clearHistory();
        console.log('‚úì –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async refreshData() {
        if (!this.isInitialized) return false;
        
        try {
            await this.updateWindData();
            await this.updateForecast();
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    destroy() {
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã JollyKite App...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.stopAutoUpdate();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã
        this.mapController.destroy();
        
        // –û—á–∏—Å—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (this.windArrowController) {
            this.windArrowController.clear();
        }
        
        this.forecastManager.clear();
        
        this.isInitialized = false;
        console.log('‚úÖ JollyKite App –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

export default App;