/**
 * KiteSizeCalculator - calculates recommended kite size based on wind speed and rider weight
 *
 * Based on general kitesurfing formulas:
 * - Lighter winds (5-12 knots) require larger kites
 * - Medium winds (12-20 knots) require medium kites
 * - Strong winds (20-30+ knots) require smaller kites
 *
 * Formula approximation:
 * Kite Size (m¬≤) ‚âà Rider Weight (kg) / Wind Speed (knots) * Factor
 * Where Factor depends on conditions and experience level
 */
class KiteSizeCalculator {
  constructor() {
    // Available kite sizes in m¬≤
    this.kiteSizes = [9, 12, 14, 17];

    // –ö–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    // –î–ª—è twin-tip –¥–æ—Å–æ–∫ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∫–∞—Ç–∞–Ω–∏—è
    // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–∏ 14 —É–∑–ª–∞—Ö 12–º –∫–∞–π—Ç –¥–ª—è 55 –∫–≥, 14–º –¥–ª—è 68 –∫–≥
    this.baseFactor = 3.0;  // –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –≤–µ—Å–∞)

    // –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–π—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–π —Å–∏–ª–µ –≤–µ—Ç—Ä–∞
    // –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–∞–π—Ç–æ–≤
    this.kiteRanges = {
      9: {
        minWind: 18,   // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –¥–ª—è 9–º –∫–∞–π—Ç–∞
        optimalWind: 25,
        maxWind: 40,
        weightRange: [50, 90]  // –¥–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–∞ —Ä–∞–π–¥–µ—Ä–æ–≤
      },
      12: {
        minWind: 13,
        optimalWind: 18,
        maxWind: 30,
        weightRange: [50, 100]
      },
      14: {
        minWind: 10,
        optimalWind: 15,
        maxWind: 25,
        weightRange: [50, 110]
      },
      17: {
        minWind: 8,
        optimalWind: 12,
        maxWind: 20,
        weightRange: [50, 120]
      }
    };
  }

  /**
   * Calculate optimal rider weight for a given kite size and wind speed
   * Returns weight in 5kg increments
   */
  calculateOptimalWeight(kiteSize, windSpeed) {
    // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: Weight = KiteSize * WindSpeed / Factor
    const baseWeight = (kiteSize * windSpeed) / this.baseFactor;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞–π—Ç–∞
    let adjustedWeight = baseWeight;

    // –î–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–π—Ç–æ–≤ (17–º) –≤ —Å–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤–µ—Å–∞
    if (kiteSize === 17 && windSpeed < 10) {
      adjustedWeight *= 1.15;
    }

    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–∞–π—Ç–æ–≤ (9–º) –≤ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ –≤–µ—Å–∞
    if (kiteSize === 9 && windSpeed > 25) {
      adjustedWeight *= 0.9;
    }

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 5 –∫–≥
    const roundedWeight = Math.round(adjustedWeight / 5) * 5;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–µ—Å –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const range = this.kiteRanges[kiteSize];
    if (range) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
      return Math.max(range.weightRange[0], Math.min(range.weightRange[1], roundedWeight));
    }

    return roundedWeight;
  }

  /**
   * Get recommendations for all kite sizes based on current wind speed
   * Returns array of objects with kite size and recommended weight
   */
  getRecommendations(windSpeed) {
    return this.kiteSizes.map(size => {
      const range = this.kiteRanges[size];
      const weight = this.calculateOptimalWeight(size, windSpeed);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Ç—Ä–∞
      let suitability = 'none';
      let color = '#666';

      if (windSpeed >= range.minWind && windSpeed <= range.maxWind) {
        // –ö–∞–π—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
        const distanceToOptimal = Math.abs(windSpeed - range.optimalWind);

        if (distanceToOptimal <= 3) {
          suitability = 'optimal';
          color = '#00FF00';  // –ó–µ–ª—ë–Ω—ã–π - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
        } else if (distanceToOptimal <= 5) {
          suitability = 'good';
          color = '#90EE90';  // –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π - —Ö–æ—Ä–æ—à–æ
        } else {
          suitability = 'acceptable';
          color = '#FFD700';  // –ñ—ë–ª—Ç—ã–π - –ø—Ä–∏–µ–º–ª–µ–º–æ
        }
      } else if (windSpeed < range.minWind) {
        suitability = 'too_light';
        color = '#87CEEB';  // –ì–æ–ª—É–±–æ–π - —Å–ª–∞–±–æ
      } else {
        suitability = 'too_strong';
        color = '#FF6347';  // –ö—Ä–∞—Å–Ω—ã–π - —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ
      }

      return {
        size,
        weight,
        suitability,
        color,
        range
      };
    });
  }

  /**
   * Find best kite size for specific rider weight and wind speed
   */
  findBestKiteSize(riderWeight, windSpeed) {
    const recommendations = this.getRecommendations(windSpeed);

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–π—Ç, –≥–¥–µ –≤–µ—Å —Ä–∞–π–¥–µ—Ä–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–º—É
    let bestMatch = null;
    let minDifference = Infinity;

    recommendations.forEach(rec => {
      const difference = Math.abs(rec.weight - riderWeight);
      if (difference < minDifference && rec.suitability !== 'none') {
        minDifference = difference;
        bestMatch = rec;
      }
    });

    return bestMatch;
  }

  /**
   * Get description for suitability level
   */
  getSuitabilityText(suitability) {
    const texts = {
      'optimal': '–û—Ç–ª–∏—á–Ω–æ!',
      'good': '–•–æ—Ä–æ—à–æ',
      'acceptable': '–ü–æ–¥–æ–π–¥—ë—Ç',
      'too_light': '–°–ª–∞–±–æ',
      'too_strong': '–°–∏–ª—å–Ω–æ',
      'none': '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'
    };
    return texts[suitability] || '';
  }

  /**
   * Get detailed recommendation text
   */
  getRecommendationText(windSpeed) {
    if (windSpeed < 8) {
      return 'üèñÔ∏è –°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä –¥–ª—è –∫–∞–π—Ç—Å—ë—Ä—Ñ–∏–Ω–≥–∞';
    } else if (windSpeed >= 8 && windSpeed < 12) {
      return 'üí® –°–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä - –Ω—É–∂–µ–Ω –±–æ–ª—å—à–æ–π –∫–∞–π—Ç (17–º)';
    } else if (windSpeed >= 12 && windSpeed < 18) {
      return '‚ú® –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è - —Å—Ä–µ–¥–Ω–∏–π –∫–∞–π—Ç (12-14–º)';
    } else if (windSpeed >= 18 && windSpeed < 25) {
      return 'üî• –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - –º–∞–ª–µ–Ω—å–∫–∏–π –∫–∞–π—Ç (9-12–º)';
    } else if (windSpeed >= 25 && windSpeed < 30) {
      return 'üí™ –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –º–∞–ª—ã–π –∫–∞–π—Ç (9–º)';
    } else {
      return '‚ö†Ô∏è –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö!';
    }
  }
}

export default KiteSizeCalculator;
