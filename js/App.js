import WindDataManager from './WindDataManager.js';
import MapController from './MapController.js';
import ForecastManager from './ForecastManager.js';
import WindArrowController from './WindArrowController.js';
import HistoryManager from './HistoryManager.js';

class App {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        this.windDataManager = new WindDataManager();
        this.mapController = new MapController();
        this.forecastManager = new ForecastManager();
        this.historyManager = new HistoryManager();
        
        this.windArrowController = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã
        this.updateInterval = null;
        this.isInitialized = false;
    }

    async init() {
        try {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JollyKite App...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
            this.mapController.initMap();
            console.log('‚úì –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞
            this.windArrowController = new WindArrowController(
                this.mapController, 
                this.windDataManager
            );
            console.log('‚úì –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            if (!this.forecastManager.init()) {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
            } else {
                console.log('‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            this.forecastManager.setupSimulation((direction, speed) => {
                this.simulateWind(direction, speed);
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏
            if (!this.historyManager.isStorageAvailable()) {
                console.warn('‚ö† –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)');
            } else {
                console.log('‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤');
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startAutoUpdate();
            
            this.isInitialized = true;
            console.log('‚úÖ JollyKite App —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            return false;
        }
    }

    async loadInitialData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ
        try {
            await this.updateWindData();
            console.log('‚úì –î–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ:', error);
            this.showWindError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        try {
            await this.updateForecast();
            console.log('‚úì –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            console.error('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
            this.forecastManager.showError(error);
        }
    }

    async updateWindData() {
        try {
            const windData = await this.windDataManager.fetchCurrentWindData();
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const safety = this.windDataManager.getWindSafety(
                windData.windDir, 
                windData.windSpeedKnots
            );
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            windData.safety = safety;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            this.updateWindDisplay(windData);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–µ—Ç—Ä–∞
            if (this.windArrowController) {
                this.windArrowController.updateWind(windData.windDir, windData.windSpeedKnots);
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if (this.historyManager.isStorageAvailable()) {
                this.historyManager.saveWindData(windData);
            }
            
            return windData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ:', error);
            throw error;
        }
    }

    updateWindDisplay(windData) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
        const windSpeedElement = document.getElementById('windSpeed');
        if (windSpeedElement) {
            windSpeedElement.textContent = windData.windSpeedKnots.toFixed(1);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞
        this.updateWindDescription(windData);
    }

    updateWindDescription(windData) {
        const windDesc = this.getWindDescription(windData.windSpeedKnots, windData.windDir);
        
        const windIcon = document.getElementById('windIcon');
        const windTitle = document.getElementById('windTitle');
        const windSubtitle = document.getElementById('windSubtitle');

        if (windIcon) windIcon.textContent = windDesc.icon;
        if (windTitle) windTitle.textContent = windDesc.title;
        if (windSubtitle) windSubtitle.textContent = windDesc.subtitle;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const windButton = document.getElementById('windDescriptionButton');
        if (windButton && windData.safety) {
            windButton.style.borderColor = windData.safety.color;
            windButton.style.boxShadow = `0 0 20px ${windData.safety.color}40`;
        }
    }

    getWindDescription(speedKnots, degrees) {
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const speed = parseFloat(speedKnots) || 0;
        
        if (speed < 5) {
            return {
                icon: 'üçÉ',
                title: '–®—Ç–∏–ª—å',
                subtitle: '–í–µ—Ç—Ä–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç'
            };
        } else if (speed < 12) {
            return {
                icon: 'üí®',
                title: '–õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä',
                subtitle: `${speed.toFixed(1)} —É–∑–ª–æ–≤`
            };
        } else if (speed < 20) {
            return {
                icon: 'üå¨Ô∏è',
                title: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä',
                subtitle: `${speed.toFixed(1)} —É–∑–ª–æ–≤ - –æ—Ç–ª–∏—á–æ –¥–ª—è –∫–∞–π—Ç–∞!`
            };
        } else if (speed < 30) {
            return {
                icon: 'üí®',
                title: '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä',
                subtitle: `${speed.toFixed(1)} —É–∑–ª–æ–≤ - –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö`
            };
        } else {
            return {
                icon: '‚ö°',
                title: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä',
                subtitle: `${speed.toFixed(1)} —É–∑–ª–æ–≤ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!`
            };
        }
    }

    async updateForecast() {
        try {
            this.forecastManager.showLoading();
            const forecastData = await this.windDataManager.fetchWindForecast();
            this.forecastManager.displayForecast(forecastData);
        } catch (error) {
            this.forecastManager.showError(error);
            throw error;
        }
    }

    simulateWind(direction, speed) {
        console.log(`–°–∏–º—É–ª—è—Ü–∏—è –≤–µ—Ç—Ä–∞: ${speed} —É–∑–ª–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${direction}¬∞`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const simulatedData = {
            windSpeedKnots: speed,
            windDir: direction,
            windGustKnots: speed * 1.2,
            windDirAvg: direction,
            temperature: 85, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            humidity: 65,
            pressure: 30.1,
            timestamp: new Date()
        };
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const safety = this.windDataManager.getWindSafety(direction, speed);
        simulatedData.safety = safety;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.updateWindDisplay(simulatedData);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
        if (this.windArrowController) {
            this.windArrowController.updateWind(direction, speed);
        }
    }

    showWindError(message) {
        const windTitle = document.getElementById('windTitle');
        const windSubtitle = document.getElementById('windSubtitle');
        const windIcon = document.getElementById('windIcon');
        
        if (windTitle) windTitle.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        if (windSubtitle) windSubtitle.textContent = message;
        if (windIcon) windIcon.textContent = '‚ö†Ô∏è';
    }

    startAutoUpdate(intervalMs = 30000) {
        if (this.updateInterval) {
            this.stopAutoUpdate();
        }
        
        console.log(`–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMs/1000} —Å–µ–∫`);
        this.updateInterval = setInterval(async () => {
            try {
                await this.updateWindData();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, intervalMs);
    }

    stopAutoUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    getWindHistory(hours = 24) {
        return this.historyManager.getHistoryByPeriod(hours);
    }

    getWindStatistics(hours = 24) {
        return this.historyManager.getWindStatistics(hours);
    }

    exportHistoryJSON(hours = null) {
        return this.historyManager.exportHistoryJSON(hours);
    }

    exportHistoryCSV(hours = null) {
        return this.historyManager.exportHistoryCSV(hours);
    }

    clearHistory() {
        return this.historyManager.clearHistory();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async refreshData() {
        if (!this.isInitialized) return false;
        
        try {
            await this.updateWindData();
            await this.updateForecast();
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    destroy() {
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã JollyKite App...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.stopAutoUpdate();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã
        this.mapController.destroy();
        
        // –û—á–∏—Å—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (this.windArrowController) {
            this.windArrowController.clear();
        }
        
        this.forecastManager.clear();
        
        this.isInitialized = false;
        console.log('‚úÖ JollyKite App –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

export default App;