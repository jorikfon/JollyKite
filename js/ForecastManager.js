class ForecastManager {
    constructor() {
        this.forecastContainer = null;
    }

    init() {
        this.forecastContainer = document.getElementById('windForecast');
        if (!this.forecastContainer) {
            console.error('Forecast container not found');
            return false;
        }
        return true;
    }

    showLoading() {
        if (this.forecastContainer) {
            this.forecastContainer.innerHTML = `
                <div class="text-center py-8">
                    <div class="inline-block w-5 h-5 border-3 border-white/30 border-t-white rounded-full animate-spin mb-3"></div>
                    <p class="text-white/80">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ç—Ä–∞...</p>
                </div>
            `;
        }
    }

    showError(error) {
        if (this.forecastContainer) {
            this.forecastContainer.innerHTML = `
                <div class="forecast-loading">
                    <p class="text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${error.message}</p>
                </div>
            `;
        }
    }

    displayForecast(hoursData) {
        if (!this.forecastContainer) return;

        const getWindSafety = (direction, speed) => {
            const dir = parseInt(direction);
            const knots = parseFloat(speed) || 0;

            // –û–ü–ê–°–ù–´–ô offshore (–æ—Ç–∂–∏–º): 225¬∞-315¬∞ (–Æ–ó-–°–ó) - –≤–µ—Ç–µ—Ä –¥—É–µ—Ç –° –ë–ï–†–ï–ì–ê –í –ú–û–†–ï
            const isOffshore = (dir >= 225 && dir <= 315);
            // –ë–ï–ó–û–ü–ê–°–ù–´–ô onshore (–ø—Ä–∏–∂–∏–º): 45¬∞-135¬∞ (–°–í-–Æ–í) - –≤–µ—Ç–µ—Ä –¥—É–µ—Ç –° –ú–û–†–Ø –ù–ê –ë–ï–†–ï–ì
            const isOnshore = (dir >= 45 && dir <= 135);

            let safetyLevel = 'medium';
            let safetyColor = '#FFA500';
            let isGoodForKiting = false;

            if (knots < 5) {
                safetyLevel = 'low';
                safetyColor = '#87CEEB';
            } else if (isOffshore || knots > 30) {
                // Offshore (–æ—Ç–∂–∏–º) –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä = –û–ü–ê–°–ù–û (–∫—Ä–∞—Å–Ω—ã–π)
                safetyLevel = 'danger';
                safetyColor = '#FF4500';
            } else if (isOnshore && knots >= 12 && knots <= 25) {
                // Onshore (–ø—Ä–∏–∂–∏–º) —Å —Ö–æ—Ä–æ—à–∏–º –≤–µ—Ç—Ä–æ–º = –û–¢–õ–ò–ß–ù–û (–∑–µ–ª–µ–Ω—ã–π)
                safetyLevel = 'high';
                safetyColor = '#00FF00';
                isGoodForKiting = true;
            } else if (isOnshore && knots >= 5 && knots < 12) {
                // Onshore (–ø—Ä–∏–∂–∏–º) —Å–æ —Å–ª–∞–±—ã–º-—Å—Ä–µ–¥–Ω–∏–º –≤–µ—Ç—Ä–æ–º = –ë–ï–ó–û–ü–ê–°–ù–û (–∂–µ–ª—Ç—ã–π)
                safetyLevel = 'good';
                safetyColor = '#FFD700';
            } else if (knots >= 8 && knots <= 15) {
                // Sideshore —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –≤–µ—Ç—Ä–æ–º = –•–û–†–û–®–û (–∂–µ–ª—Ç—ã–π)
                safetyLevel = 'good';
                safetyColor = '#FFD700';
            }

            return {
                level: safetyLevel,
                color: safetyColor,
                isOffshore,
                isOnshore,
                isGoodForKiting
            };
        };

        const getWindIcon = (speed) => {
            if (speed < 5) return 'üí®';
            if (speed < 12) return 'üå¨Ô∏è';
            if (speed < 20) return 'üí®';
            if (speed < 30) return 'üå™Ô∏è';
            return '‚ö°';
        };

        const getCardinalDirection = (degrees) => {
            const directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];
            const index = Math.round(degrees / 45) % 8;
            return directions[index];
        };

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        const dayGroups = {};
        hoursData.forEach(hour => {
            const dayKey = hour.date.toDateString();
            if (!dayGroups[dayKey]) {
                dayGroups[dayKey] = [];
            }
            dayGroups[dayKey].push(hour);
        });

        let forecastHTML = '';
        Object.entries(dayGroups).forEach(([dayKey, group]) => {
            const dayName = this.getDayName(new Date(dayKey));
            
            forecastHTML += `
                <div class="mb-6">
                    <div class="text-sm font-semibold text-white mb-3 text-center bg-white/10 rounded-lg py-2">
                        ${dayName}
                    </div>
                    <div class="flex gap-1 min-w-full">
            `;

            group.forEach(hour => {
                const safety = getWindSafety(hour.direction, hour.speed);
                const windIcon = getWindIcon(hour.speed);
                const cardinalDir = getCardinalDirection(hour.direction);
                const kiteIcon = safety.isGoodForKiting ? 'ü™Å' : '';

                forecastHTML += `
                    <div class="flex-1 min-w-[60px] rounded-lg p-2 flex flex-col justify-between items-center text-center cursor-pointer transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                         style="background: ${safety.color}; border: 2px solid ${safety.color}; box-shadow: 0 0 15px ${safety.color}40;"
                         onclick="simulateWind(${hour.direction}, ${hour.speed})" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏">
                        <div class="text-xs font-semibold text-white drop-shadow-md">${hour.time}:00 ${kiteIcon}</div>
                        <div class="text-lg my-1 drop-shadow-md">${windIcon}</div>
                        <div class="text-sm font-bold text-white drop-shadow-md">${hour.speed.toFixed(1)}</div>
                        <div class="text-xs text-white/90 drop-shadow-sm">${cardinalDir}</div>
                    </div>
                `;
            });

            forecastHTML += `
                    </div>
                </div>
            `;
        });

        this.forecastContainer.innerHTML = forecastHTML;
    }

    getDayName(date) {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        const dayAfterTomorrow = new Date(today);
        dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);

        const targetDate = new Date(date);
        
        if (targetDate.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (targetDate.toDateString() === tomorrow.toDateString()) {
            return '–ó–∞–≤—Ç—Ä–∞';
        } else if (targetDate.toDateString() === dayAfterTomorrow.toDateString()) {
            return '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
        } else {
            const options = { 
                weekday: 'long', 
                day: 'numeric', 
                month: 'short' 
            };
            return targetDate.toLocaleDateString('ru-RU', options);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–µ—Ç—Ä–∞ (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ)
    setupSimulation(simulateCallback) {
        window.simulateWind = simulateCallback;
    }

    clear() {
        if (this.forecastContainer) {
            this.forecastContainer.innerHTML = '';
        }
    }
}

export default ForecastManager;