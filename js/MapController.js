class MapController {
    constructor() {
        this.map = null;
        this.kitesurferMarker = null;
        this.spotMarkers = [];
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        this.spotLocation = [12.346596280786017, 99.99817902532192]; // JollyKite —Å–ø–æ—Ç
        this.kiterLocation = [12.3468, 100.0125]; // –ö–∞–π—Ç–µ—Ä –≤ –º–æ—Ä–µ
        this.beachNorth = [12.350, 99.996];
        this.beachSouth = [12.343, 100.001];
        this.seaBearing = 90;
        this.landBearing = 270;
    }

    initMap() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        const mapCenter = [this.spotLocation[0], this.spotLocation[1] - 0.002]; // –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ
        
        this.map = L.map('map', {
            center: mapCenter,
            zoom: 14,
            zoomControl: false,  // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑—É–º–∞
            attributionControl: false,
            dragging: false,     // –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            touchZoom: false,    // –ó–∞–ø—Ä–µ—Ç –∑—É–º–∞ –∫–∞—Å–∞–Ω–∏–µ–º (pinch)
            doubleClickZoom: false,  // –ó–∞–ø—Ä–µ—Ç –∑—É–º–∞ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
            scrollWheelZoom: false,  // –ó–∞–ø—Ä–µ—Ç –∑—É–º–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
            boxZoom: false,      // –ó–∞–ø—Ä–µ—Ç –∑—É–º–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            keyboard: false,     // –ó–∞–ø—Ä–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            tap: false           // –û—Ç–∫–ª—é—á–∏—Ç—å tap handler (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: ''
        }).addTo(this.map);

        this.addMarkers();
        return this.map;
    }

    addMarkers() {
        // –ò–∫–æ–Ω–∫–∞ –∫–∞–π—Ç—Å–µ—Ä—Ñ–µ—Ä–∞
        const kitesurferIcon = L.divIcon({
            html: `
                <div class="kitesurfer-icon">
                    <div class="kitesurfer-animation">
                        <div class="kite-icon">ü™Å</div>
                        <div class="surfer-icon">üèÑ‚Äç‚ôÇÔ∏è</div>
                    </div>
                </div>
            `,
            className: 'kitesurfer-marker-icon',
            iconSize: [60, 60],
            iconAnchor: [30, 30]
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –∫–∞–π—Ç—Å–µ—Ä—Ñ–µ—Ä–∞
        this.kitesurferMarker = L.marker(this.kiterLocation, { 
            icon: kitesurferIcon 
        }).addTo(this.map);

        // –ú–∞—Ä–∫–µ—Ä —Å–ø–æ—Ç–∞ JollyKite
        const spotMarker = L.marker(this.spotLocation, {
            icon: L.divIcon({
                html: '<div class="spot-marker">üèñÔ∏è</div>',
                className: 'spot-icon',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            })
        }).addTo(this.map);
        spotMarker.bindPopup('<b>JollyKite Spot</b><br>–õ—É—á—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥–∞!');

        // –ú–∞—Ä–∫–µ—Ä –ø–ª—è–∂–∞
        const beachMarker = L.marker([12.347, 99.998], {
            icon: L.divIcon({
                html: '<div class="beach-marker">üèñÔ∏è</div>',
                className: 'beach-icon',
                iconSize: [25, 25],
                iconAnchor: [12, 12]
            })
        }).addTo(this.map);
        beachMarker.bindPopup('–ü–ª—è–∂ –ü–∞–∫ –ù–∞–º –ü—Ä–∞–Ω');

        // –ú–∞—Ä–∫–µ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏
        const parkingMarker = L.marker([12.3445, 99.9985], {
            icon: L.divIcon({
                html: '<div class="parking-marker">üÖøÔ∏è</div>',
                className: 'parking-icon',
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            })
        }).addTo(this.map);
        parkingMarker.bindPopup('–ü–∞—Ä–∫–æ–≤–∫–∞');

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.spotMarkers = [spotMarker, beachMarker, parkingMarker];
    }

    getKiterLocation() {
        return this.kiterLocation;
    }

    getSpotLocation() {
        return this.spotLocation;
    }

    addWindArrow(windArrowMarker) {
        if (windArrowMarker && this.map) {
            windArrowMarker.addTo(this.map);
        }
    }

    removeWindArrow(windArrowMarker) {
        if (windArrowMarker && this.map) {
            this.map.removeLayer(windArrowMarker);
        }
    }

    fitBounds() {
        if (this.map && this.spotMarkers.length > 0) {
            const group = new L.featureGroup([this.kitesurferMarker, ...this.spotMarkers]);
            this.map.fitBounds(group.getBounds().pad(0.1));
        }
    }

    setView(latlng, zoom = 14) {
        if (this.map) {
            this.map.setView(latlng, zoom);
        }
    }

    destroy() {
        if (this.map) {
            this.map.remove();
            this.map = null;
        }
    }
}

export default MapController;